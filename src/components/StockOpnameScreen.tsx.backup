import React, { useState, useEffect, useRef } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Alert, ScrollView, TextInput, KeyboardAvoidingView, Platform } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { InventoryItem } from '../models/Inventory';
import { fetchAllInventoryItems, fetchInventoryItemByCode, modifyInventoryItem } from '../services/InventoryService';
import { startStockOpname, addItemToStockOpname, processStockOpname } from '../services/StockOpnameService';
import ItemListModal from './ItemListModal';
import ScannerModal from './ScannerModal';
import { debugPrintAllItems, debugFindItemBySku } from '../services/DatabaseService';
import SOReportScreen from './SOReportScreen';

// Format number as Rupiah currency
const formatRupiah = (amount: number): string => {
  return new Intl.NumberFormat('id-ID', {
    style: 'currency',
    currency: 'IDR',
    minimumFractionDigits: 0,
  }).format(amount);
};

interface StockOpnameScreenProps {
  onBack?: () => void;
  unfinishedSO?: {
    step: 1 | 2 | 3;
    soType: 'partial' | 'grand';
    itemsToCheck: InventoryItem[];
    opnameId: string | null;
    physicalQtys: Record<string, number>;
    inputTexts: Record<string, string>;
    discrepancies: Array<{
      code: string;
      sku: string;
      name: string;
      physicalQty: number;
      systemQty: number;
      difference: number;
      price: number;
      totalValue: number;
    }>;
  } | null;
  onResumeSO?: () => void;
}

const StockOpnameScreen: React.FC<StockOpnameScreenProps> = ({ onBack, unfinishedSO, onResumeSO }) => {
  // State untuk tahap pertama
  const [step, setStep] = useState<1 | 2 | 3>(unfinishedSO ? unfinishedSO.step : 1);
  const [soType, setSoType] = useState<'partial' | 'grand'>(unfinishedSO ? unfinishedSO.soType : 'partial');
  const [itemsToCheck, setItemsToCheck] = useState<InventoryItem[]>(unfinishedSO ? unfinishedSO.itemsToCheck : []);
  const [opnameId, setOpnameId] = useState<string | null>(unfinishedSO ? unfinishedSO.opnameId : null);
  
  // State untuk qty fisik setiap item
  const [physicalQtys, setPhysicalQtys] = useState<Record<string, number>>(unfinishedSO ? unfinishedSO.physicalQtys : {});
  const [inputTexts, setInputTexts] = useState<Record<string, string>>(unfinishedSO ? unfinishedSO.inputTexts : {});
  
  // State untuk scanner
  const [scannerVisible, setScannerVisible] = useState(false);
  
  // State untuk hasil selisih
  const [discrepancies, setDiscrepancies] = useState<Array<{
    code: string;
    sku: string;
    name: string;
    physicalQty: number;
    systemQty: number;
    difference: number;
    price: number;
    totalValue: number;
  }>>(unfinishedSO ? unfinishedSO.discrepancies : []);
  
  // State untuk informasi stock opname
  const [soInfo] = useState({
    date: new Date().toLocaleDateString('id-ID'),
    time: new Date().toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' }),
    user: 'Admin User' // Ini akan diambil dari context auth nantinya
  });
  
  // State untuk tahap kedua
  const [manualInput, setManualInput] = useState('');
  const [allItems, setAllItems] = useState<InventoryItem[]>([]);
  const [loading, setLoading] = useState(false);
  const [showItemList, setShowItemList] = useState(false);
  
  // State untuk filter pencarian
  const [searchFilter, setSearchFilter] = useState('');
  
  // State untuk laporan
  const [showReport, setShowReport] = useState(false);
  const [reportData, setReportData] = useState<any>(null);
  
  // Refs
  const scrollViewRef = useRef<ScrollView>(null);
  const lastInputRef = useRef<TextInput>(null);

  useEffect(() => {
    if (step === 2 && soType === 'grand') {
      loadAllItems();
    }
  }, [step, soType]);

  useEffect(() => {
    if (step === 3 && discrepancies.length > 0) {
      // Scroll ke item pertama dengan selisih
      setTimeout(() => {
        scrollViewRef.current?.scrollTo({ y: 0, animated: true });
      }, 100);
    }
  }, [step, discrepancies]);

  const loadAllItems = async () => {
    try {
      setLoading(true);
      const items = await fetchAllInventoryItems();
      setAllItems(items);
      
      // Untuk Grand SO, tambahkan semua item ke itemsToCheck
      if (soType === 'grand') {
        setItemsToCheck(items);
        
        // Inisialisasi physicalQtys dengan 0 untuk setiap item
        const initialQtys: Record<string, number> = {};
        const initialTexts: Record<string, string> = {};
        items.forEach(item => {
          initialQtys[item.code] = 0;
          initialTexts[item.code] = '0';
        });
        setPhysicalQtys(initialQtys);
        setInputTexts(initialTexts);
      }
    } catch (error) {
      console.error('Error loading items:', error);
      Alert.alert('Error', 'Gagal memuat data item');
    } finally {
      setLoading(false);
    }
  };

  const handleStartSO = async () => {
    if (!soType) {
      Alert.alert('Peringatan', 'Silakan pilih tipe SO terlebih dahulu');
      return;
    }

    try {
      const opname = await startStockOpname(soType);
      setOpnameId(opname.id);
      setStep(2);
      
      // Reset states jika beralih ke Grand SO
      if (soType === 'grand') {
        setItemsToCheck([]);
        setPhysicalQtys({});
        setInputTexts({});
      }
    } catch (error) {
      console.error('Error starting stock opname:', error);
      Alert.alert('Error', 'Gagal memulai stock opname');
    }
  };

  const handleAddItem = async (item: InventoryItem) => {
    // Cek apakah item sudah ada dalam daftar
    if (itemsToCheck.some(i => i.code === item.code)) {
      Alert.alert('Peringatan', 'Item sudah ada dalam daftar SO');
      return;
    }

    try {
      // Tambahkan item ke stock opname di database
      if (opnameId) {
        await addItemToStockOpname(opnameId, item.code);
      }
      
      // Tambahkan item ke state
      setItemsToCheck(prev => [...prev, item]);
      
      // Inisialisasi qty fisik untuk item baru dengan string kosong
      // Ini akan membuat input text kosong saat pertama kali ditambahkan
      setPhysicalQtys(prev => ({ ...prev, [item.code]: 0 }));
      setInputTexts(prev => ({ ...prev, [item.code]: '' }));
      
      setShowItemList(false);
    } catch (error) {
      console.error('Error adding item to stock opname:', error);
      Alert.alert('Error', 'Gagal menambahkan item ke stock opname');
    }
  };

  const handleRemoveItem = (code: string) => {
    setItemsToCheck(prev => prev.filter(item => item.code !== code));
    setPhysicalQtys(prev => {
      const newQtys = { ...prev };
      delete newQtys[code];
      return newQtys;
    });
    setInputTexts(prev => {
      const newTexts = { ...prev };
      delete newTexts[code];
      return newTexts;
    });
  };

  const handleBarcodeScanned = async (barcode: string) => {
    try {
      // Cari item berdasarkan barcode
      const item = await fetchInventoryItemByCode(barcode);
      
      if (item) {
        // Jika sudah ada, fokus ke input qty
        const existingItemIndex = itemsToCheck.findIndex(i => i.code === item.code);
        if (existingItemIndex !== -1) {
          // Fokus ke input qty item yang sudah ada
          // Kita tidak bisa langsung fokus ke TextInput di React Native dengan cara ini
          // Tapi kita bisa scroll ke item tersebut
          setTimeout(() => {
            scrollViewRef.current?.scrollTo({ y: existingItemIndex * 100, animated: true });
          }, 100);
        } else {
          // Jika belum ada, tambahkan item
          await handleAddItem(item);
        }
      } else {
        Alert.alert('Item Tidak Ditemukan', `Item dengan kode ${barcode} tidak ditemukan dalam database.`);
      }
    } catch (error) {
      console.error('Error scanning barcode:', error);
      Alert.alert('Error', 'Gagal memindai barcode');
    } finally {
      setScannerVisible(false);
    }
  };

  const handleProcessSO = async () => {
    if (itemsToCheck.length === 0) {
      Alert.alert('Peringatan', 'Tidak ada item untuk di SO');
      return;
    }
    
    if (!opnameId) {
      Alert.alert('Error', 'Stock opname belum dimulai dengan benar');
      return;
    }
    
    // Proses semua input qty fisik yang belum disimpan
    const processedPhysicalQtys = { ...physicalQtys };
    Object.keys(inputTexts).forEach(code => {
      const textValue = inputTexts[code];
      if (textValue !== undefined) {
        // Jika input kosong, set ke 0
        const parsedQty = textValue === '' ? 0 : parseInt(textValue, 10) || 0;
        processedPhysicalQtys[code] = parsedQty;
      }
    });
    
    Alert.alert(
      'Proses Stock Opname',
      `Apakah Anda yakin ingin memproses Stock Opname untuk ${itemsToCheck.length} item?`,
      [
        { text: 'Batal', style: 'cancel' },
        {
          text: 'Ya, Proses',
          onPress: async () => {
            try {
              // Hitung selisih untuk setiap item
              const discrepancyData = itemsToCheck.map(item => {
                const physicalQty = processedPhysicalQtys[item.code] !== undefined ? processedPhysicalQtys[item.code] : 0;
                const systemQty = item.quantity;
                const difference = physicalQty - systemQty;
                // Untuk totalValue, kita pertahankan tanda positif/negatif sesuai selisih
                const totalValue = difference * item.price;
                
                return {
                  code: item.code,
                  sku: item.sku || '',
                  name: item.name,
                  physicalQty,
                  systemQty,
                  difference,
                  price: item.price,
                  totalValue
                };
              });
              
              // Filter hanya item yang memiliki selisih
              const itemsWithDiscrepancies = discrepancyData.filter(item => item.difference !== 0);
              
              // Simpan data selisih
              setDiscrepancies(itemsWithDiscrepancies);
              
              // Update physicalQtys state dengan nilai yang telah diproses
              setPhysicalQtys(processedPhysicalQtys);
              
              // Update inputTexts state dengan nilai yang telah diproses
              const updatedInputTexts = { ...inputTexts };
              Object.keys(processedPhysicalQtys).forEach(code => {
                updatedInputTexts[code] = processedPhysicalQtys[code].toString();
              });
              setInputTexts(updatedInputTexts);
              
              // Gunakan qty fisik yang dimasukkan user
              const itemsWithQuantities = itemsToCheck.map(item => ({
                code: item.code,
                actualQuantity: processedPhysicalQtys[item.code] !== undefined ? processedPhysicalQtys[item.code] : 0
              }));
              
              await processStockOpname(opnameId, itemsWithQuantities);
              
              // Pindah ke tahap selisih
              setStep(3);
              
              // Tampilkan pesan jumlah item dengan selisih
              if (itemsWithDiscrepancies.length > 0) {
                Alert.alert(
                  'Selisih Ditemukan',
                  `Ditemukan ${itemsWithDiscrepancies.length} item dengan selisih. Silakan periksa detail selisih.`,
                  [{ text: 'OK' }]
                );
              } else {
                Alert.alert(
                  'Tidak Ada Selisih',
                  'Semua item sesuai antara qty fisik dan qty sistem.',
                  [{ text: 'OK' }]
                );
              }
            } catch (error) {
              console.error('Error processing stock opname:', error);
              Alert.alert('Error', 'Gagal memproses stock opname');
            }
          }
        }
      ]
    );
  };

  // Fungsi untuk memperbaiki stock opname dan menyinkronkan dengan database
  const handleFixStockOpname = async () => {
    if (discrepancies.length === 0) {
      Alert.alert('Info', 'Tidak ada selisih yang perlu diperbaiki');
      return;
    }
    
    Alert.alert(
      'Konfirmasi Perbaikan Stock',
      `Apakah Anda yakin ingin menyinkronkan ${discrepancies.length} item dengan qty fisik terbaru? Ini akan memperbarui qty sistem sesuai qty fisik.`,
      [
        { text: 'Batal', style: 'cancel' },
        {
          text: 'Ya, Perbaiki',
          onPress: async () => {
            try {
              // Update qty sistem untuk setiap item dengan selisih
              for (const item of discrepancies) {
                const physicalQty = physicalQtys[item.code] !== undefined ? physicalQtys[item.code] : item.physicalQty;
                await modifyInventoryItem(item.code, { quantity: physicalQty });
              }
              
              // Buat log untuk setiap barang yang memiliki selisih
              const logMessages: string[] = [];
              const timestamp = new Date().toISOString();
              const soDate = soInfo.date;
              const soTime = soInfo.time;
              const user = soInfo.user;
              
              discrepancies.forEach(item => {
                if (item.difference !== 0) {
                  const logMessage = `[${timestamp}] SO ${soDate} ${soTime} by ${user}: Item ${item.code} (${item.name}) - System Qty: ${item.systemQty}, Physical Qty: ${item.physicalQty}, Difference: ${item.difference > 0 ? '+' : ''}${item.difference}, Value: ${item.totalValue > 0 ? '+' : ''}${formatRupiah(item.totalValue)}`;
                  logMessages.push(logMessage);
                }
              });
              
              // Simpan log ke console (dalam implementasi nyata, ini bisa disimpan ke file atau database)
              console.log('=== STOCK OPNAME LOG ===');
              console.log(`Date: ${soDate}`);
              console.log(`Time: ${soTime}`);
              console.log(`User: ${user}`);
              console.log(`Total Items SO: ${itemsToCheck.length}`);
              console.log(`Items with Discrepancy: ${discrepancies.length}`);
              console.log(`Total Discrepancy Qty: ${discrepancies.reduce((sum, item) => sum + Math.abs(item.difference), 0)}`);
              console.log(`Total Discrepancy Value: ${discrepancies.reduce((sum, item) => sum + item.totalValue, 0) >= 0 ? '+' : ''}${formatRupiah(discrepancies.reduce((sum, item) => sum + item.totalValue, 0))}`);
              console.log('--- Item Logs ---');
              logMessages.forEach(log => console.log(log));
              console.log('=== END LOG ===');
              
              // Buat data laporan
              const totalItems = itemsToCheck.length;
              const itemsWithDiscrepancies = discrepancies.length;
              const totalPlusItems = discrepancies.filter(item => item.difference > 0).length;
              const totalMinusItems = discrepancies.filter(item => item.difference < 0).length;
              const totalDiscrepancyQty = discrepancies.reduce((sum, item) => sum + Math.abs(item.difference), 0);
              const totalDiscrepancyValue = discrepancies.reduce((sum, item) => sum + item.totalValue, 0);
              const totalPlusValue = discrepancies.filter(item => item.difference > 0).reduce((sum, item) => sum + item.totalValue, 0);
              const totalMinusValue = discrepancies.filter(item => item.difference < 0).reduce((sum, item) => sum + item.totalValue, 0);
              
              const reportData = {
                date: soInfo.date,
                time: soInfo.time,
                user: soInfo.user,
                totalItems: totalItems,
                itemsWithDiscrepancies: itemsWithDiscrepancies,
                totalPlusItems: totalPlusItems,
                totalMinusItems: totalMinusItems,
                totalDiscrepancyQty: totalDiscrepancyQty,
                totalDiscrepancyValue: totalDiscrepancyValue,
                totalPlusValue: totalPlusValue,
                totalMinusValue: totalMinusValue,
                discrepancyDetails: discrepancies,
                timestamp: new Date().toISOString()
              };
              
              // Tampilkan halaman laporan
              setReportData(reportData);
              setShowReport(true);
            } catch (error) {
              console.error('Error fixing stock opname:', error);
              Alert.alert('Error', 'Gagal memperbaiki stock opname');
            }
          }
        }
      ]
    );
  };

  const handleRefreshDiscrepancies = () => {
    // Recalculate discrepancies based on current physicalQtys
    const updatedDiscrepancies = itemsToCheck.map(item => {
      const physicalQty = physicalQtys[item.code] !== undefined ? physicalQtys[item.code] : item.quantity;
      const systemQty = item.quantity;
      const difference = physicalQty - systemQty;
      const totalValue = difference * item.price;
      
      return {
        code: item.code,
        sku: item.sku || '',
        name: item.name,
        physicalQty,
        systemQty,
        difference,
        price: item.price,
        totalValue
      };
    }).filter(item => item.difference !== 0);
    
    setDiscrepancies(updatedDiscrepancies);
  };

  // Render tahap pertama - Pemilihan tipe SO
  const renderStepOne = () => (
    <View style={styles.stepContainer}>
      <Text style={styles.stepTitle}>Pilih Tipe Stock Opname</Text>
      
      <View style={styles.typeSelection}>
        <TouchableOpacity 
          style={[styles.typeButton, soType === 'partial' && styles.typeButtonSelected]}
          onPress={() => setSoType('partial')}
        >
          <Text style={[styles.typeButtonText, soType === 'partial' && styles.typeButtonTextSelected]}>
            Partial SO
          </Text>
        </TouchableOpacity>
        
        <TouchableOpacity 
          style={[styles.typeButton, soType === 'grand' && styles.typeButtonSelected]}
          onPress={() => setSoType('grand')}
        >
          <Text style={[styles.typeButtonText, soType === 'grand' && styles.typeButtonTextSelected]}>
            Grand SO
          </Text>
        </TouchableOpacity>
      </View>
      
      {soType === 'partial' && (
        <View style={styles.partialSoInfo}>
          <Text style={styles.partialSoText}>Partial SO memungkinkan Anda untuk memilih item tertentu yang akan di SO.</Text>
        </View>
      )}
      
      {soType === 'grand' && (
        <View style={styles.grandSoInfo}>
          <Text style={styles.grandSoText}>Grand SO akan memuat semua item untuk di SO.</Text>
          <Text style={styles.grandSoSubtext}>Tekan tombol "Mulai SO" untuk melanjutkan.</Text>
        </View>
      )}
      
      <TouchableOpacity 
        style={styles.startButton} 
        onPress={handleStartSO}
      >
        <Text style={styles.startButtonText}>Mulai SO</Text>
      </TouchableOpacity>
    </View>
  );

  // Render tahap kedua - Input item dan qty fisik
  const renderStepTwo = () => (
    <View style={styles.stepContainer}>
      <View style={styles.infoRow}>
        <Text style={styles.infoLabel}>Tipe SO:</Text>
        <Text style={styles.infoValue}>{soType === 'partial' ? 'Partial SO' : 'Grand SO'}</Text>
      </View>
      
      <Text style={styles.sectionTitle}>
        {soType === 'partial' ? 'Tambah Item untuk di SO' : 'Item untuk di SO (Grand SO)'}
      </Text>
      
      {soType === 'partial' ? (
        <>
          <View style={styles.inputSection}>
            <View style={styles.inputContainer}>
              <TextInput
                style={styles.textInput}
                placeholder="Scan barcode atau masukkan kode item"
                value={manualInput}
                onChangeText={setManualInput}
                onSubmitEditing={async () => {
                  if (manualInput.trim()) {
                    try {
                      const item = await fetchInventoryItemByCode(manualInput.trim());
                      if (item) {
                        await handleAddItem(item);
                        setManualInput('');
                      } else {
                        Alert.alert('Item Tidak Ditemukan', `Item dengan kode ${manualInput.trim()} tidak ditemukan.`);
                      }
                    } catch (error) {
                      console.error('Error fetching item:', error);
                      Alert.alert('Error', 'Gagal mencari item');
                    }
                  }
                }}
              />
              <TouchableOpacity 
                style={styles.addButton}
                onPress={async () => {
                  if (manualInput.trim()) {
                    try {
                      const item = await fetchInventoryItemByCode(manualInput.trim());
                      if (item) {
                        await handleAddItem(item);
                        setManualInput('');
                      } else {
                        Alert.alert('Item Tidak Ditemukan', `Item dengan kode ${manualInput.trim()} tidak ditemukan.`);
                      }
                    } catch (error) {
                      console.error('Error fetching item:', error);
                      Alert.alert('Error', 'Gagal mencari item');
                    }
                  }
                }}
              >
                <Text style={styles.addButtonText}>Tambah</Text>
              </TouchableOpacity>
            </View>
            
            <View style={styles.buttonRow}>
              <TouchableOpacity 
                style={styles.scanButton}
                onPress={() => setScannerVisible(true)}
              >
                <Text style={styles.scanButtonText}>Scan</Text>
              </TouchableOpacity>
              
              <TouchableOpacity 
                style={styles.f1Button}
                onPress={() => setShowItemList(true)}
              >
                <Text style={styles.f1ButtonText}>F1 - Item List</Text>
              </TouchableOpacity>
            </View>
          </View>
        </>
      ) : (
        <View style={styles.grandSoInfo}>
          <Text style={styles.grandSoText}>Grand SO sedang memuat semua item...</Text>
          {loading && <Text style={styles.grandSoSubtext}>Mohon tunggu...</Text>}
        </View>
      )}
      
      {itemsToCheck.length > 0 ? (
        <>
          <ScrollView 
            style={styles.itemsList} 
            ref={scrollViewRef}
            showsVerticalScrollIndicator={true}
          >
            {itemsToCheck.map((item, index) => (
              <View key={item.code} style={styles.itemRow}>
                <Text style={styles.itemNumber}>{index + 1}.</Text>
                <View style={styles.itemInfo}>
                  <Text style={styles.itemName}>{item.name}</Text>
                  <Text style={styles.itemCode}>Kode: {item.code}</Text>
                  {item.sku && <Text style={styles.itemSku}>SKU: {item.sku}</Text>}
                </View>
                <View style={styles.qtySection}>
                  <Text style={styles.qtyLabel}>Qty Fisik</Text>
                  <TextInput
                    style={styles.qtyInput}
                    value={inputTexts[item.code] !== undefined ? inputTexts[item.code] : ''}
                    onChangeText={(text) => {
                      // Cegah input yang diawali dengan 0 (kecuali hanya 0)
                      if (text.length > 1 && text.startsWith('0') && text[1] !== '.') {
                        return;
                      }
                      
                      // Simpan text sebagai string untuk tampilan langsung
                      setInputTexts(prev => {
                        const newInputs = { ...prev };
                        newInputs[item.code] = text;
                        return newInputs;
                      });
                    }}
                    onEndEditing={(e) => {
                      const textValue = e.nativeEvent.text;
                      // Jika input kosong, set ke 0
                      const parsedQty = textValue === '' ? 0 : parseInt(textValue, 10) || 0;
                      setPhysicalQtys(prev => ({ ...prev, [item.code]: parsedQty }));
                      setInputTexts(prev => ({ ...prev, [item.code]: parsedQty.toString() }));
                    }}
                    keyboardType="numeric"
                  />
                  <Text style={styles.qtyHint}>Enter</Text>
                </View>
                {soType === 'partial' && (
                  <TouchableOpacity 
                    style={styles.removeButton}
                    onPress={() => handleRemoveItem(item.code)}
                  >
                    <Text style={styles.removeButtonText}>Hapus</Text>
                  </TouchableOpacity>
                )}
              </View>
            ))}
          </ScrollView>
          
          <TouchableOpacity 
            style={styles.processButton} 
            onPress={handleProcessSO}
          >
            <Text style={styles.processButtonText}>Proses SO</Text>
          </TouchableOpacity>
        </>
      ) : (
        <View style={styles.emptyContainer}>
          <Text style={styles.emptyText}>
            {soType === 'partial' 
              ? 'Belum ada item. Tambahkan item dengan scan barcode atau input manual.' 
              : 'Memuat item untuk Grand SO...'}
          </Text>
        </View>
      )}
      
      <ItemListModal 
        visible={showItemList}
        onClose={() => setShowItemList(false)}
        onSelectItem={handleAddItem}
      />
      
      <ScannerModal
        visible={scannerVisible}
        onBarcodeScanned={handleBarcodeScanned}
        onClose={() => setScannerVisible(false)}
      />
    </View>
  );

  // Render tahap ketiga - Menampilkan selisih
  const renderStepThree = () => {
    // Urutkan discrepancies: kelebihan dulu (positif), kemudian kekurangan (negatif)
    // Di dalam setiap kategori, urutkan berdasarkan kode barang (secara alfabetis)
    const sortedDiscrepancies = [...discrepancies].sort((a, b) => {
      // Jika salah satu positif dan lainnya negatif
      if (a.difference > 0 && b.difference < 0) return -1;
      if (a.difference < 0 && b.difference > 0) return 1;
      
      // Jika keduanya positif atau keduanya negatif, urutkan berdasarkan kode
      if ((a.difference > 0 && b.difference > 0) || (a.difference < 0 && b.difference < 0)) {
        return a.code.localeCompare(b.code);
      }
      
      // Default case (should not happen with current logic)
      return 0;
    });
    
    return (
      <View style={styles.stepContainer}>
        <View style={styles.infoRow}>
          <Text style={styles.infoLabel}>Tipe SO:</Text>
          <Text style={styles.infoValue}>{soType === 'partial' ? 'Partial SO' : 'Grand SO'}</Text>
        </View>
        
        <Text style={styles.sectionTitle}>Selisih Stock Opname</Text>
        
        <View style={styles.buttonRow}>
          <TouchableOpacity 
            style={styles.scanButton}
            onPress={() => setScannerVisible(true)}
          >
            <Text style={styles.scanButtonText}>Scan</Text>
          </TouchableOpacity>
        </View>
        
        {sortedDiscrepancies.length > 0 ? (
          <>
            <ScrollView style={styles.discrepancyList} showsVerticalScrollIndicator={true} ref={scrollViewRef}>
              <ScrollView horizontal style={{ width: '100%' }} showsHorizontalScrollIndicator={true}>
                <View>
                  <View style={styles.tableHeader}>
                    <Text style={[styles.tableHeaderText, styles.noColumn]}>No</Text>
                    <Text style={[styles.tableHeaderText, { width: 80 }]}>Kode{'\n'}SKU</Text>
                    <Text style={[styles.tableHeaderText, styles.nameColumn]}>Nama Item</Text>
                    <Text style={[styles.tableHeaderText, styles.qtyColumn]}>Qty{'\n'}Fisik</Text>
                    <Text style={[styles.tableHeaderText, styles.qtyColumn]}>Qty{'\n'}Sistem</Text>
                    <Text style={[styles.tableHeaderText, styles.differenceColumn]}>Selisih</Text>
                    <Text style={[styles.tableHeaderText, styles.totalColumn]}>Total</Text>
                  </View>
                  
                  {sortedDiscrepancies.map((item, index) => (
                    <View key={item.code} style={styles.tableRow}>
                      <Text style={[styles.tableCell, styles.noColumn]}>{index + 1}</Text>
                      <View style={[styles.tableCellView, { width: 80 }]}>
                        <Text style={styles.tableCell}>{item.code}</Text>
                        {item.sku ? <Text style={styles.tableCell}>{item.sku}</Text> : null}
                      </View>
                      <Text style={[styles.tableCell, styles.nameColumn]}>{item.name}</Text>
                      <TextInput
                        style={[styles.tableCell, styles.qtyColumn, { borderWidth: 1, borderColor: '#ddd', borderRadius: 4, padding: 2, fontSize: 14, fontWeight: 'bold' }]}
                        value={inputTexts[item.code] !== undefined ? inputTexts[item.code] : item.physicalQty.toString()}
                        onChangeText={(text) => {
                          // Cegah input yang diawali dengan 0 (kecuali hanya 0)
                          if (text.length > 1 && text.startsWith('0') && text[1] !== '.') {
                            return;
                          }
                          
                          // Simpan text sebagai string untuk tampilan langsung
                          setInputTexts(prev => {
                            const newInputs = { ...prev };
                            newInputs[item.code] = text;
                            return newInputs;
                          });
                        }}
                        onEndEditing={(e) => {
                          const textValue = e.nativeEvent.text;
                          // Jika input kosong, gunakan nilai sebelumnya
                          const parsedQty = textValue === '' ? (physicalQtys[item.code] !== undefined ? physicalQtys[item.code] : item.physicalQty) : parseInt(textValue, 10) || 0;
                          // Update physicalQtys state dengan nilai yang valid
                          setPhysicalQtys(prev => {
                            const newQtys = { ...prev };
                            newQtys[item.code] = parsedQty;
                            return newQtys;
                          });
                          // Update inputTexts state dengan nilai yang valid
                          setInputTexts(prev => {
                            const newInputs = { ...prev };
                            newInputs[item.code] = parsedQty.toString();
                            return newInputs;
                          });
                          // Update discrepancies state hanya setelah selesai mengedit
                          setDiscrepancies(prev => 
                            prev.map(itemDiscrepancy => {
                              if (itemDiscrepancy.code === item.code) {
                                const systemQty = itemDiscrepancy.systemQty;
                                const difference = parsedQty - systemQty;
                                // Untuk totalValue, kita pertahankan tanda positif/negatif sesuai selisih
                                const totalValue = difference * itemDiscrepancy.price;
                                return {
                                  ...itemDiscrepancy,
                                  physicalQty: parsedQty,
                                  difference,
                                  totalValue
                                };
                              }
                              return itemDiscrepancy;
                            })
                          );
                        }}
                        keyboardType="numeric"
                        ref={index === sortedDiscrepancies.length - 1 ? lastInputRef : null}
                      />
                      <Text style={[styles.tableCell, styles.qtyColumn]}>{item.systemQty}</Text>
                      <Text style={[
                        styles.tableCell, 
                        styles.differenceColumn,
                        item.difference > 0 ? styles.overageText : styles.shortageText
                      ]}>
                        {item.difference > 0 ? `+${item.difference}` : item.difference < 0 ? `${item.difference}` : item.difference}
                      </Text>
                      <Text style={[
                        styles.tableCell, 
                        styles.totalColumn,
                        item.totalValue < 0 ? { color: '#FF3B30' } : item.totalValue > 0 ? { color: '#34C759' } : {}
                      ]}>
                        {item.totalValue > 0 ? '+' : item.totalValue < 0 ? '-' : ''}{formatRupiah(Math.abs(item.totalValue))}
                      </Text>
                    </View>
                  ))}
                </View>
              </ScrollView>
              
              {/* Ringkasan */}
              <View style={styles.summaryContainer}>
                <View style={styles.summaryRow}>
                  <Text style={styles.summaryLabel}>Total Item dengan Selisih:</Text>
                  <Text style={styles.summaryValue}>{discrepancies.length}</Text>
                </View>
                
                <View style={styles.summaryRow}>
                  <Text style={styles.summaryLabel}>Total Selisih (Qty):</Text>
                  <Text style={styles.summaryValue}>
                    {discrepancies.reduce((sum, item) => sum + item.difference, 0) >= 0 ? '+' : ''}{discrepancies.reduce((sum, item) => sum + item.difference, 0)}
                  </Text>
                </View>
                
                <View style={styles.summaryRow}>
                  <Text style={styles.summaryLabel}>Total Nilai Selisih:</Text>
                  <Text style={[
                    styles.summaryValueTotal,
                    discrepancies.length > 0 ? (
                      discrepancies.reduce((sum, item) => sum + item.totalValue, 0) > 0 ? (
                        // Jika total positif
                        { color: '#34C759' }
                      ) : discrepancies.reduce((sum, item) => sum + item.totalValue, 0) < 0 ? (
                        // Jika total negatif
                        { color: '#FF3B30' }
                      ) : {}
                    ) : {}
                  ]}>
                    {discrepancies.length > 0 ? (
                      discrepancies.reduce((sum, item) => sum + item.totalValue, 0) > 0 ? (
                        // Jika total positif
                        `+${formatRupiah(discrepancies.reduce((sum, item) => sum + item.totalValue, 0))}`
                      ) : discrepancies.reduce((sum, item) => sum + item.totalValue, 0) < 0 ? (
                        // Jika total negatif
                        `-${formatRupiah(Math.abs(discrepancies.reduce((sum, item) => sum + item.totalValue, 0)))}`
                      ) : 'Rp0'
                    ) : 'Rp0'}
                  </Text>
                </View>
              </View>
            </ScrollView>
            
            <TouchableOpacity 
              style={styles.processButton} 
              onPress={handleFixStockOpname}
            >
              <Text style={styles.processButtonText}>Fixed SO</Text>
            </TouchableOpacity>
          </>
        ) : (
          <View style={styles.noDiscrepancyContainer}>
            <Text style={styles.noDiscrepancyText}>Tidak Ada Selisih</Text>
            <Text style={styles.noDiscrepancySubtext}>Qty fisik sesuai dengan qty sistem untuk semua item.</Text>
          </View>
        )}
        
        <ScannerModal
          visible={scannerVisible}
          onBarcodeScanned={handleBarcodeScanned}
          onClose={() => setScannerVisible(false)}
        />
      </View>
    );
  };

  return (
    <KeyboardAvoidingView 
      style={{ flex: 1 }}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      keyboardVerticalOffset={Platform.OS === 'ios' ? 64 : 0}
    >
      <SafeAreaView style={styles.safeArea} edges={['top']}>
        {showReport ? (
          <SOReportScreen 
            reportData={reportData}
            onResumeSO={onResumeSO}
            onNewSO={() => {
              // Reset semua state dan kembali ke tahap awal
              setItemsToCheck([]);
              setPhysicalQtys({});
              setInputTexts({});
              setOpnameId(null);
              setDiscrepancies([]);
              setStep(1);
              setSoType('partial');
              setManualInput('');
              setSearchFilter('');
              setShowReport(false);
              setReportData(null);
            }}
          />
        ) : (
          <View style={styles.container}>
            <View style={styles.header}>
              <TouchableOpacity 
                style={styles.backButton} 
                onPress={onBack}
              >
                <Text style={styles.backButtonText}>Kembali</Text>
              </TouchableOpacity>
              <Text style={styles.title}>Stock Opname</Text>
              <View style={{ width: 90 }} /> {/* Spacer untuk menjaga title tetap di tengah */}
            </View>
            
            {step === 1 && renderStepOne()}
            {step === 2 && renderStepTwo()}
            {step === 3 && renderStepThree()}
          </View>
        )}
      </SafeAreaView>
    </KeyboardAvoidingView>
  );
};

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: 'white',
  },
  container: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 15,
    backgroundColor: 'white',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 1,
  },
  backButton: {
    backgroundColor: '#007AFF',
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 20,
    minWidth: 90,
    alignItems: 'center',
    justifyContent: 'center',
  },
  backButtonText: {
    color: 'white',
    fontWeight: '700',
    fontSize: 14,
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
  },
  stepContainer: {
    flex: 1,
    padding: 20,
  },
  stepTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 15,
  },
  infoRow: {
    flexDirection: 'row',
    marginBottom: 10,
  },
  infoLabel: {
    width: 80,
    fontSize: 16,
    color: '#666',
  },
  infoValue: {
    flex: 1,
    fontSize: 16,
    color: '#333',
    fontWeight: '500',
  },
  typeSelection: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 30,
  },
  typeButton: {
    flex: 1,
    paddingVertical: 15,
    paddingHorizontal: 20,
    backgroundColor: '#f0f0f0',
    borderRadius: 10,
    marginHorizontal: 5,
    alignItems: 'center',
  },
  typeButtonSelected: {
    backgroundColor: '#007AFF',
  },
  typeButtonText: {
    fontSize: 16,
    color: '#666',
    fontWeight: '600',
  },
  typeButtonTextSelected: {
    color: 'white',
  },
  startButton: {
    backgroundColor: '#34C759',
    paddingVertical: 15,
    borderRadius: 10,
    alignItems: 'center',
  },
  startButtonText: {
    fontSize: 18,
    color: 'white',
    fontWeight: 'bold',
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 15,
  },
  inputSection: {
    marginBottom: 20,
  },
  inputContainer: {
    flexDirection: 'row',
    marginBottom: 10,
  },
  textInput: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    paddingHorizontal: 15,
    paddingVertical: 12,
    fontSize: 16,
    backgroundColor: 'white',
  },
  addButton: {
    backgroundColor: '#007AFF',
    paddingHorizontal: 20,
    paddingVertical: 12,
    borderRadius: 8,
    marginLeft: 10,
    justifyContent: 'center',
  },
  addButtonText: {
    color: 'white',
    fontWeight: '600',
    fontSize: 16,
  },
  buttonRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 15,
  },
  scanButton: {
    flex: 1,
    backgroundColor: '#34C759',
    paddingVertical: 12,
    borderRadius: 8,
    marginRight: 5,
    alignItems: 'center',
  },
  scanButtonText: {
    color: 'white',
    fontWeight: '600',
    fontSize: 16,
  },
  f1Button: {
    flex: 1,
    backgroundColor: '#FF9500',
    paddingVertical: 12,
    borderRadius: 8,
    marginLeft: 5,
    alignItems: 'center',
  },
  f1ButtonText: {
    color: 'white',
    fontWeight: '600',
    fontSize: 16,
  },
  grandSoInfo: {
    backgroundColor: '#e0f7fa',
    padding: 15,
    borderRadius: 10,
    marginBottom: 20,
    alignItems: 'center',
  },
  grandSoText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#00796b',
  },
  grandSoSubtext: {
    fontSize: 14,
    color: '#00796b',
    marginTop: 5,
  },
  itemsList: {
    flex: 1,
  },
  itemRow: {
    flexDirection: 'row',
    backgroundColor: 'white',
    padding: 15,
    borderRadius: 8,
    marginBottom: 10,
    elevation: 1,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 1,
    alignItems: 'center',
  },
  itemNumber: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#007AFF',
    width: 30,
  },
  itemInfo: {
    flex: 1,
  },
  itemName: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 5,
  },
  itemCode: {
    fontSize: 14,
    color: '#666',
    marginBottom: 3,
  },
  itemSku: {
    fontSize: 14,
    color: '#666',
  },
  qtySection: {
    alignItems: 'center',
    marginHorizontal: 10,
  },
  qtyLabel: {
    fontSize: 12,
    color: '#666',
    marginBottom: 3,
  },
  qtyInput: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 4,
    paddingVertical: 5,
    paddingHorizontal: 8,
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
    minWidth: 50,
    textAlign: 'center',
  },
  qtyHint: {
    fontSize: 10,
    color: '#999',
    marginTop: 3,
    textAlign: 'center',
  },
  removeButton: {
    backgroundColor: '#FF3B30',
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 6,
    justifyContent: 'center',
  },
  removeButtonText: {
    color: 'white',
    fontWeight: '600',
    fontSize: 14,
  },
  processButton: {
    backgroundColor: '#34C759',
    paddingVertical: 15,
    borderRadius: 10,
    alignItems: 'center',
    marginTop: 15,
  },
  processButtonText: {
    fontSize: 18,
    color: 'white',
    fontWeight: 'bold',
  },
  // Styles for discrepancy table
  tableHeader: {
    flexDirection: 'row',
    backgroundColor: '#e0e0e0',
    paddingVertical: 10,
    paddingHorizontal: 5,
    borderRadius: 4,
    marginBottom: 5,
  },
  tableHeaderText: {
    fontWeight: 'bold',
    color: '#333',
    textAlign: 'center',
  },
  tableRow: {
    flexDirection: 'row',
    backgroundColor: 'white',
    paddingVertical: 12,
    paddingHorizontal: 6,
    borderRadius: 4,
    marginBottom: 6,
    elevation: 1,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 1,
  },
  tableCell: {
    fontSize: 14,
    color: '#333',
    textAlign: 'center',
  },
  tableCellView: {
    justifyContent: 'center',
  },
  noColumn: {
    width: 30,
  },
  shortNameColumn: {
    width: 120,
  },
  nameColumn: {
    width: 150,
  },
  qtyColumn: {
    width: 60,
  },
  differenceColumn: {
    width: 70,
  },
  totalColumn: {
    width: 100,
  },
  overageText: {
    color: '#34C759',
    fontWeight: 'bold',
  },
  shortageText: {
    color: '#FF3B30',
    fontWeight: 'bold',
  },
  noDiscrepancyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 40,
  },
  noDiscrepancyText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#34C759',
    marginBottom: 10,
  },
  noDiscrepancySubtext: {
    fontSize: 16,
    color: '#666',
  },
  discrepancyList: {
    flex: 1,
    marginBottom: 15,
    width: '100%',
  },
  summaryContainer: {
    backgroundColor: 'white',
    padding: 15,
    borderRadius: 8,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 1,
    marginBottom: 15,
  },
  summaryRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  summaryLabel: {
    fontSize: 14,
    color: '#666',
  },
  summaryValue: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333',
  },
  summaryValueTotal: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#007AFF',
  },
  finishButton: {
    backgroundColor: '#007AFF',
    paddingVertical: 15,
    borderRadius: 10,
    alignItems: 'center',
  },
  finishButtonText: {
    fontSize: 18,
    color: 'white',
    fontWeight: 'bold',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 40,
  },
  emptyText: {
    fontSize: 16,
    color: '#999',
  },
});

export default StockOpnameScreen;